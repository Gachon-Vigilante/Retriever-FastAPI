"""텔레그램 클라이언트 등록 모듈 - 인증된 클라이언트의 토큰 생성 및 관리

이 모듈은 텔레그램 인증이 완료된 클라이언트를 Teleprobe 시스템에 등록하고
액세스 토큰을 생성하는 기능을 제공합니다. 토큰의 생성, 검증, 만료 관리와
데이터베이스 저장을 담당합니다.

Telegram Client Registration Module - Token generation and management for authenticated clients

This module provides functionality to register authenticated Telegram clients in the Teleprobe system
and generate access tokens. It handles token generation, validation, expiration management,
and database storage.
"""

import hashlib
import secrets
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, ConfigDict

from core.constants import TELEPROBE_TOKEN_EXPIRATION
from core.sqlite import TelegramToken, get_db
from teleprobe.base import TeleprobeClient
from teleprobe.models import TelegramCredentials
from utils import Logger

logger = Logger(__name__)


# 응답 모델
class RegisterResponse(BaseModel):
    """클라이언트 등록 응답을 나타내는 Pydantic 모델

    텔레그램 클라이언트 등록 완료 후 클라이언트에게 반환되는 응답 데이터를 정의합니다.
    생성된 액세스 토큰, 만료 시간, 등록 결과 메시지를 포함합니다.

    Pydantic model representing client registration response

    Defines response data returned to client after Telegram client registration completion.
    Includes generated access token, expiration time, and registration result message.

    Attributes:
        token (str): "tpb_" 접두어가 붙은 40자 액세스 토큰
                   40-character access token with "tpb_" prefix
        expires_at (datetime): 토큰 만료 시간
                              Token expiration time
        message (str): 등록 결과에 대한 메시지
                      Message about registration result

    Examples:
        response = RegisterResponse(
            token="tpb_abc123...",
            expires_at=datetime(2024, 12, 31, 23, 59, 59),
            message="클라이언트가 성공적으로 등록되었습니다."
        )
    """
    token: str = Field(
        title="Telegram Access Token",
        description="Telegram access token generated by Teleprobe.",
        pattern="^tpb_[a-zA-Z0-9]{40}$",
    )
    expires_at: datetime = Field(
        title="Token Expiration Date",
        description="Token expiration date.",
        serialization_alias="expiresAt"
    )
    message: str = Field(
        default="Client registered successfully.",
        title="Message",
        description="Message about the registration result."
    )

    model_config = ConfigDict(
        json_encoders={
            datetime: lambda dt: dt.isoformat() if dt else None
        }
    )



def generate_token(api_id: int, api_hash: str) -> str:
    """고유한 Teleprobe 액세스 토큰을 생성하는 함수

    API ID, API 해시, 현재 타임스탬프, 랜덤 값을 조합하여 SHA256 해시 기반의
    고유한 토큰을 생성합니다. "tpb_" 접두어를 붙여 Teleprobe 토큰임을 식별할 수 있습니다.

    Function to generate unique Teleprobe access token

    Generates unique token based on SHA256 hash by combining API ID, API hash,
    current timestamp, and random value. Adds "tpb_" prefix to identify as Teleprobe token.

    Args:
        api_id (int): 텔레그램 API ID
                     Telegram API ID
        api_hash (str): 텔레그램 API 해시
                       Telegram API hash

    Returns:
        str: "tpb_" 접두어가 붙은 40자 해시 토큰
            40-character hash token with "tpb_" prefix

    Examples:
        token = generate_token(12345, "abcdef123456")
        # Returns: "tpb_a1b2c3d4e5f6..."

    Note:
        토큰 생성 과정:
        1. 현재 시간의 마이크로초 타임스탬프 생성
        2. 16바이트 랜덤 값 생성
        3. API ID, API 해시, 타임스탬프, 랜덤 값을 결합
        4. SHA256 해시 생성 후 앞 40자 사용
        5. "tpb_" 접두어 추가

        Token generation process:
        1. Generate microsecond timestamp of current time
        2. Generate 16-byte random value
        3. Combine API ID, API hash, timestamp, random value
        4. Generate SHA256 hash and use first 40 characters
        5. Add "tpb_" prefix
    """
    # 현재 시간과 랜덤 값을 조합하여 고유성 보장
    timestamp = str(int(datetime.now().timestamp() * 1000000))
    random_part = secrets.token_hex(16)
    unique_data = f"{api_id}:{api_hash}:{timestamp}:{random_part}"

    # SHA256 해시로 토큰 생성
    token_hash = hashlib.sha256(unique_data.encode()).hexdigest()
    return f"tpb_{token_hash[:40]}"  # teleprobe 접두어 + 40자 해시

async def register(
    credentials: TelegramCredentials,
):
    """TeleprobeClient를 등록하고 인증 토큰을 생성하는 비동기 함수

    제공된 텔레그램 자격증명을 사용하여 TeleprobeClient를 생성하고 연결을 검증한 후,
    액세스 토큰을 생성하여 데이터베이스에 저장합니다. 이미 활성화된 토큰이 있는 경우
    기존 토큰을 반환합니다.

    Asynchronous function to register TeleprobeClient and generate authentication token

    Creates TeleprobeClient using provided Telegram credentials, validates connection,
    then generates access token and stores it in database. Returns existing token
    if there is already an active token.

    Args:
        credentials (TelegramCredentials): 텔레그램 자격증명 정보
                                         Telegram credential information
            - api_id: Telegram API ID (필수)
            - api_hash: Telegram API Hash (필수)  
            - session_string: 세션 문자열 (필수)
            - phone: 전화번호 (선택적)

    Returns:
        RegisterResponse: 등록 결과 응답 객체
                         Registration result response object
            - token: 생성된 인증 토큰
            - expires_at: 토큰 만료 시간
            - message: 처리 결과 메시지

    Raises:
        ConnectionError: 텔레그램 서비스 연결 실패 시
                        When Telegram service connection fails
        ValueError: 잘못된 자격증명 정보 제공 시
                   When invalid credential information is provided
        DatabaseError: 데이터베이스 저장 실패 시
                      When database storage fails

    Examples:
        credentials = TelegramCredentials(
            api_id=12345,
            api_hash="abcdef123456",
            session_string="1AgAOMTQ5LjE1NC4xNjc...",
            phone="+821012345678"
        )

        response = await register(credentials)
        print(f"Token: {response.token}")
        print(f"Expires: {response.expires_at}")

    Note:
        등록 과정:
        1. 자격증명으로 TeleprobeClient 생성
        2. 텔레그램 서버 연결 테스트
        3. 기존 활성 토큰 검사
        4. 기존 토큰이 있으면 반환, 없으면 새 토큰 생성
        5. 데이터베이스에 토큰 정보 저장
        6. 등록 결과 응답 반환

        Registration process:
        1. Create TeleprobeClient with credentials
        2. Test connection to Telegram server
        3. Check for existing active tokens
        4. Return existing token if available, otherwise generate new token
        5. Save token information to database
        6. Return registration result response
    """
    with get_db() as db:
        # TeleprobeClient 생성 (자동으로 연결 테스트)
        logger.info(f"TeleprobeClient 등록 시작: api_id={client.api_id}")
        with TeleprobeClient(
            api_id=credentials.api_id,
            api_hash=credentials.api_hash,
            session_string=credentials.session_string,
            phone=credentials.phone
        ) as client:

            # 기존 토큰 확인 (같은 api_id로 이미 등록된 경우)
            existing_token: Optional[TelegramToken] = db.query(TelegramToken).filter(
                TelegramToken.api_id == client.api_id,
                TelegramToken.is_active == 1,
                TelegramToken.expires_at > datetime.now()
            ).first()

            if existing_token:
                logger.info(f"기존 활성 토큰 발견: {existing_token.token[:10]}...")
                return RegisterResponse(
                    token=existing_token.token,
                    expires_at=existing_token.expires_at,
                    message="기존 활성 토큰을 반환했습니다."
                )

            # 새 토큰 생성
            token = generate_token(client.api_id, client.api_hash)
            expires_at = datetime.now() + TELEPROBE_TOKEN_EXPIRATION  # 만료일 설정

            # 데이터베이스에 저장
            db_token = TelegramToken(
                token=token,
                api_id=client.api_id,
                api_hash=client.api_hash,
                session_string=client.session_string,
                phone=client.phone,
                expires_at=expires_at,
                is_active=1
            )
            db.add(db_token)
            db.commit()
            db.refresh(db_token)

            logger.info(f"새 토큰 생성 완료: {token[:10]}... (api_id: {client.api_id})")

            return RegisterResponse(
                token=token,
                expires_at=expires_at,
                message="클라이언트가 성공적으로 등록되었습니다."
            )
